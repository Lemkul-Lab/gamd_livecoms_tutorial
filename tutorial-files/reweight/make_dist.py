# python script to generate distributions for GaMD simulations
# First generated by MDP, edited and maintained by HMM

import numpy as np
from scipy import stats
import sys, os, argparse



help ="""\n
    This script calculates the distribution of a data array. By default,
    the distribution calculated here is normalized so the area below the
    curve is 1.\n
"""

# Parse user input and options
ap = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter,
                             usage=help,
                             add_help=False)
ap._optionals.title = 'Options'

# Mandatory
ap.add_argument('-h', '--help', action="store_true", help='Show this message and exit')
ap.add_argument('-data', type=str, default=None, required=True,
                help='Input data file.')
ap.add_argument('-bins', type=str, default=100, required=False,
                help='Number of bins.')
ap.add_argument('-col', type=str, default=1, required=False,
                help='Which column to be used for calculation (0-based)')
ap.add_argument('-out', type=str, default="dist.dat", required=False,
                help='Output distribution file.')

cmd = ap.parse_args()


file     = cmd.data
outname  = cmd.out
bins     = int(cmd.bins)
col      = int(cmd.col)

if cmd.help is True:
	ap.print_help()
	exit()
else:
	pass

##################################################

def make_distribution(given_list):
	dist = stats.gaussian_kde(given_list)

	minvalue = min(given_list)#*0.8
	maxvalue = max(given_list)#*1.2

	ord_values = np.linspace(minvalue,maxvalue,bins)
	dist = list(dist(ord_values))

	dist_norm = [value/np.sum(dist) for value in dist] # norm so the area under the curve is 1

	raw_list = []

	for i in range(len(ord_values)):
		dip = ord_values[i]
		pdf = dist_norm[i]
		raw_list.append([dip,pdf])

	return raw_list, np.sum(dist_norm)

##################################################
f = open(file, 'r')

value_list = []


print(">>> Parsing elements...")
line = f.readline() #skip the header
while True:
	line = f.readline()
	if not line: break

	if line[0] != "#" and line[0] != "!" and line[0] != "@":
		frame = line.split()[0]
		value = line.split()[col]
		value_list.append(float(value))



outdist = open(outname, "w")

print(">>> Calculating distribution...")
dist, totalarea = make_distribution(value_list)

print(">>> Total area under the curve: " + str(round(totalarea,1)))

for d in dist:
	val = str(d[0])
	pdf = str(d[1])
	outdist.write(val.ljust(30, ' ') + pdf.ljust(10,' ') + "\n")


outdist.close()
print(">>> Finished!")
